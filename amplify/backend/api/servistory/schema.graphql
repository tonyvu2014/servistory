# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Vendor {
  id: ID!
  name: String!
  address: String
  timezone: String!
  email: String
  phone: String!
  contact_no: String
  works(filter: WorkFilterInput, limit: Int, token: String): WorkConnection
  date_time_created: AWSDateTime!
  date_time_updated: AWSDateTime!
}

enum WorkStatus {
  PENDING
  IN_WORKSHOP
  WORK_COMMENCED
  AWAITING_PARTS
  COMPLETED
  COLLECTED
  CANCELLED
}

type Work {
  id: ID!
  vendor_id: ID!
  customer_name: String!
  customer_phone: String!
  tracking_no: String
  car_model: String
  plate_no: String
  note: String
  date_time_arrived: AWSDateTime
  date_time_pickup: AWSDateTime
  status: WorkStatus!
  vendor: Vendor @function(name: "resolver-${env}")
  requests(filter: WorkRequestFilterInput, limit: Int, token: String): WorkRequestConnection @function(name: "resolver-${env}")
  date_time_created: AWSDateTime!
  date_time_updated: AWSDateTime!
}

enum RequestStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

type WorkRequest {
  id: ID!
  tracking_no: String
  title: String!
  description: String
  reason: String
  attachments: String
  price: Float
  date_time_completed: AWSDateTime
  status: RequestStatus!
  work: Work @function(name: "resolver-${env}")
  date_time_created: AWSDateTime!
  date_time_updated: AWSDateTime!
  work_id: ID
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: AttributeTypes
  size: SizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: AttributeTypes
}

input FloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: AttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: AttributeTypes
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: AttributeTypes
  size: SizeInput
}

enum AttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input SizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum SortDirection {
  ASC
  DESC
}

type VendorConnection {
  items: [Vendor]!
  total: Int
  previousToken: String
  nextToken: String
}

input VendorFilterInput {
  id: IDInput
  name: StringInput
  address: StringInput
  email: StringInput
  phone: StringInput
  and: [VendorFilterInput]
  or: [VendorFilterInput]
  not: VendorFilterInput
}

input VendorConditionInput {
  name: StringInput
  address: StringInput
  email: StringInput
  phone: StringInput
  and: [VendorConditionInput]
  or: [VendorConditionInput]
  not: VendorConditionInput
}

input CreateVendorInput {
  id: ID
  name: String!
  address: String
  email: String
  phone: String!
}

input UpdateVendorInput {
  id: ID!
  name: String
  address: String
  email: String
  phone: String
}

input DeleteVendorInput {
  id: ID!
}

type WorkConnection {
  items: [Work]!
  total: Int
  previousToken: String
  nextToken: String
}

input WorkStatusInput {
  eq: WorkStatus
  ne: WorkStatus
}

input WorkFilterInput {
  id: IDInput
  vendor_id: IDInput
  customer_name: StringInput
  customer_phone: StringInput
  tracking_no: StringInput
  car_model: StringInput
  plate_no: StringInput
  note: StringInput
  date_time_arrived: StringInput
  date_time_pickup: StringInput
  status: WorkStatusInput
  and: [WorkFilterInput]
  or: [WorkFilterInput]
  not: WorkFilterInput
}

input WorkConditionInput {
  vendor_id: IDInput
  customer_name: StringInput
  customer_phone: StringInput
  tracking_no: StringInput
  car_model: StringInput
  plate_no: StringInput
  note: StringInput
  date_time_arrived: StringInput
  date_time_pickup: StringInput
  status: WorkStatusInput
  and: [WorkConditionInput]
  or: [WorkConditionInput]
  not: WorkConditionInput
}

input CreateWorkInput {
  id: ID
  vendor_id: ID!
  customer_name: String!
  customer_phone: String!
  tracking_no: String
  car_model: String
  plate_no: String
  note: String
  date_time_arrived: AWSDateTime
  date_time_pickup: AWSDateTime
  status: WorkStatus
}

input UpdateWorkInput {
  id: ID!
  customer_name: String
  customer_phone: String
  car_model: String
  plate_no: String
  note: String
  date_time_arrived: AWSDateTime
  date_time_pickup: AWSDateTime
  status: WorkStatus
}

input DeleteWorkInput {
  id: ID!
}

type WorkRequestConnection {
  items: [WorkRequest]!
  total: Int
  previousToken: String
  nextToken: String
}

input RequestStatusInput {
  eq: RequestStatus
  ne: RequestStatus
}

input WorkRequestFilterInput {
  id: IDInput
  tracking_no: StringInput
  title: StringInput
  description: StringInput
  reason: StringInput
  attachments: StringInput
  price: FloatInput
  date_time_completed: StringInput
  status: RequestStatusInput
  and: [WorkRequestFilterInput]
  or: [WorkRequestFilterInput]
  not: WorkRequestFilterInput
  work_id: IDInput
}

input WorkRequestConditionInput {
  tracking_no: StringInput
  title: StringInput
  description: StringInput
  reason: StringInput
  attachments: StringInput
  price: FloatInput
  date_time_completed: StringInput
  status: RequestStatusInput
  and: [WorkRequestConditionInput]
  or: [WorkRequestConditionInput]
  not: WorkRequestConditionInput
  work_id: IDInput
}

input CreateWorkRequestInput {
  id: ID
  tracking_no: String
  title: String!
  description: String
  reason: String
  attachments: String
  price: Float
  date_time_completed: AWSDateTime
  status: RequestStatus
  work_id: ID!
}

input UpdateWorkRequestInput {
  id: ID!
  title: String
  description: String
  reason: String
  price: Float
  attachments: String
  date_time_completed: AWSDateTime
  status: RequestStatus
  work_id: ID
}

input DeleteWorkRequestInput {
  id: ID!
}

input NotifyWorkStatusInput {
  work_id: ID!
}

type UpdateResult {
  count: Int!
}

type Query {
  getVendor(id: ID!): Vendor @function(name: "resolver-${env}")
  listVendors(filter: VendorFilterInput, limit: Int, token: String): VendorConnection @function(name: "resolver-${env}")
  getWork(id: ID!): Work @function(name: "resolver-${env}")
  listWorks(filter: WorkFilterInput, limit: Int, token: String): WorkConnection @function(name: "resolver-${env}")
  getWorkRequest(id: ID!): WorkRequest @function(name: "resolver-${env}")
  listWorkRequests(filter: WorkRequestFilterInput, limit: Int, token: String): WorkRequestConnection @function(name: "resolver-${env}")
}

type Mutation {
  createVendor(input: CreateVendorInput!, condition: VendorConditionInput): Vendor @function(name: "resolver-${env}")
  updateVendor(input: UpdateVendorInput!, condition: VendorConditionInput): Vendor @function(name: "resolver-${env}")
  deleteVendor(input: DeleteVendorInput!, condition: VendorConditionInput): Vendor @function(name: "resolver-${env}")
  createWork(input: CreateWorkInput!, condition: WorkConditionInput): Work @function(name: "resolver-${env}")
  updateWork(input: UpdateWorkInput!, condition: WorkConditionInput): Work @function(name: "resolver-${env}")
  deleteWork(input: DeleteWorkInput!, condition: WorkConditionInput): Work @function(name: "resolver-${env}")
  createWorkRequest(input: CreateWorkRequestInput!, condition: WorkRequestConditionInput): WorkRequest @function(name: "resolver-${env}")
  updateWorkRequest(input: UpdateWorkRequestInput!, condition: WorkRequestConditionInput): WorkRequest @function(name: "resolver-${env}")
  deleteWorkRequest(input: DeleteWorkRequestInput!, condition: WorkRequestConditionInput): WorkRequest @function(name: "resolver-${env}")

  notifyWorkStatus(input: NotifyWorkStatusInput!): UpdateResult @function(name: "resolver-${env}")
}

type Subscription {
  onCreateVendor: Vendor @aws_subscribe(mutations: ["createVendor"])
  onUpdateVendor: Vendor @aws_subscribe(mutations: ["updateVendor"])
  onDeleteVendor: Vendor @aws_subscribe(mutations: ["deleteVendor"])
  onCreateWork: Work @aws_subscribe(mutations: ["createWork"])
  onUpdateWork: Work @aws_subscribe(mutations: ["updateWork"])
  onDeleteWork: Work @aws_subscribe(mutations: ["deleteWork"])
  onCreateWorkRequest: WorkRequest @aws_subscribe(mutations: ["createWorkRequest"])
  onUpdateWorkRequest: WorkRequest @aws_subscribe(mutations: ["updateWorkRequest"])
  onDeleteWorkRequest: WorkRequest @aws_subscribe(mutations: ["deleteWorkRequest"])
}
